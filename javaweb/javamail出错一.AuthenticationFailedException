1.
http://www.cnblogs.com/shihuc/p/5069783.html

这个是我碰到原因，由于客户端登录用的密码不是邮箱密码。而是客户端登录验证码

 

2.http://blog.csdn.net/you23hai45/article/details/47403499
         com.sun.mail.smtp.SMTPSendFailedException: 553 Mail from must equal authorized user                     

 
2.
javax.mail.AuthenticationFailedException异常一个让你想不到的原因
博客分类：

    spring

AuthenticationFailedException 
用多个邮件给多个邮件发邮件时遇到的问题以及解决

用spring封装的javamail
做邮件群发 涉及到负载均衡 比如 先用1@qq.com2@qq.com发1封邮件（这时候没报错）
再用3@qq.com给  4@qq.com发1封邮件（也没报错）
再用用zqqrt@163.com给yuu777@163.com发1封邮件（这时候就报错了：javax.mail.AuthenticationFailedException）
如果百度搜这个异常都是说用户名密码错误啊之类的
原因，但是用户名密码 smtp  端口我确定是没有问题的，如果 我单独用这个zqqrt@163.com发邮件也是没有问题的，这就奇怪了
protected PasswordAuthentication getPasswordAuthentication() {
return new PasswordAuthentication(username, password);
}

而且 经过调试 上面的 username, password自始自终都是第一次的帐号密码 后来的163的值根本没传过来
后来总算找到一个帖子http://luckykapok918.blog.163.com/blog/static/20586504320123184515391/

找到了原因

邮件验证的时候 Session.getDefaultInstance(props, authentic);
何谓getDefaultInstance？
从处理流程中可以看出，首先是从缓存中查找是否有properties存在
如果存在，则加载默认的properties
如果不存在才加载用户自己定义的properties，
所以当一个应用为每个用户独立创建properties的时候，还是应该调用getInstance，
除非你希望有一个默认的properties让用户使用

它会首先去内存和系统文件中去找properties,所以不管我在页面改几次数据或者方法参数里传多少次不同的邮件帐号如果有smtp不同的都是按照第一次的来,其实在后台中生成session时都和系统启动时的一 样,所以在MailUtil.sendTextMessage(mailSession,RptTaskMailConfig.Sender,
receiver,null,mail_subject,mail_content,"GB2312",null);时session里的sender和传入的sender不一致,因此出错
报javax.mail.AuthenticationFailedException


session.getdefaultinstance和getinstance的区别 （引自网络）:

如果想要同时使用两个帐号发送javamail，比如使用1@a.com发送1#邮件，使用2@a.com发送2#邮件，这时候，你就需要同时创建两个java.mail.Session对象。但是如果你仍然使用Session.getDefaultInstance创建session对象的话，你会发现，第二个username：2@a.com创建的session永远都和第一个一样，这是为什么呢？因为，getDefaultInstance是真正单例模式，而且，里面的username和password属性是final型的，无法更改。所以，你会发现两封email都是由1@a.com发出来的。所以这个时候你要使用javax.mail.Session.getInstance()方法来创建session对象。


所以如果 发邮件一直 只用一个邮件发 是不会有问题的

但是你会随机选择不同邮件服务地址来给不同人发邮件
就要注意这个问题

 
java mail使用中遇到的550类型错误
Posted on 2015-12-23 14:04 shihuc 阅读(425) 评论(0) 编辑 收藏

前言

首先，需要说明的是，本错误来自于一个简单的基于java mail的api程序，邮件服务器是163的SMTP，即smtp.163.com.

 

程序

需要说明一下，下面这个程序，是来自于网络上，本人为了测试自己项目MUEAS中重置密码，通过邮件认证实现重置功能，临时用来测试用的，若有异议，请给我留言。我将会自己写一份。

 
复制代码

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
  1 package com.shihuc.demo;
  2 
  3 import java.util.*;
  4 import java.io.*;
  5 import javax.mail.*;
  6 import javax.mail.internet.*;
  7 import javax.activation.*;
  8 
  9 public class SendEmail
 10 {
 11     //收件人邮箱地址
 12     private String to; 
 13     //发件人邮箱地址
 14     private String from; 
 15     //SMTP服务器地址
 16     private String smtpServer; 
 17     //登录SMTP服务器的用户名
 18     private String username ;
 19     //登录SMTP服务器的密码
 20     private String password ;
 21     //邮件主题
 22     private String subject; 
 23     //邮件正文
 24     private String content; 
 25     //记录所有附件文件的集合
 26     List attachments = new ArrayList();
 27     //无参数的构造器
 28     public SendEmail()
 29     {
 30     }
 31     
 32     public SendEmail(String to , String from , String smtpServer 
 33         , String username , String password 
 34         , String subject , String content)
 35     { 
 36         this.to = to;
 37         this.from = from;
 38         this.smtpServer = smtpServer;
 39         this.username = username;
 40         this.password = password;
 41         this.subject = subject;
 42         this.content = content;
 43     }
 44     //to属性的setter方法
 45     public void setTo(String to)
 46     {
 47         this.to = to;
 48     }
 49     //from属性的setter方法
 50     public void setFrom(String from)
 51     {
 52         this.from = from;
 53     }
 54     //smtpServer属性的setter方法
 55     public void setSmtpServer(String smtpServer)
 56     {
 57         this.smtpServer = smtpServer;
 58     }
 59     //username属性的setter方法
 60     public void setUsername(String username)
 61     {
 62         this.username = username;
 63     }
 64     //password属性的setter方法
 65     public void setPassword(String password)
 66     {
 67         this.password = password;
 68     }
 69     //subject属性的setter方法
 70     public void setSubject(String subject)
 71     {
 72         this.subject = subject;
 73     }
 74     //content属性的setter方法
 75     public void setContent(String content)
 76     {
 77         this.content = content;
 78     }
 79     //把邮件主题转换为中文
 80     public String transferChinese(String strText)
 81     {
 82         try
 83         {
 84             strText = MimeUtility.encodeText(new String(strText.getBytes()  , "GB2312"), "GB2312", "B");
 85         }
 86         catch(Exception e)
 87         {
 88             e.printStackTrace();
 89         }
 90         return strText;
 91     }
 92     //增加附件，将附件文件名添加的List集合中
 93     public void attachfile(String fname)
 94     {
 95         attachments.add(fname);
 96     }
 97     //发送邮件
 98     public boolean send()
 99     {
100         //创建邮件Session所需的Properties对象
101         Properties props = new Properties();
102         props.put("mail.smtp.host" , smtpServer);
103         props.put("mail.smtp.auth" , "true");
104         props.put("mail.smtp.debug" , "true");
105         //创建Session对象
106         Session session = Session.getDefaultInstance(props
107             //以匿名内部类的形式创建登录服务器的认证对象
108             , new Authenticator()
109             {
110                 public PasswordAuthentication getPasswordAuthentication()
111                 {
112                     return new PasswordAuthentication(username, password); 
113                 }
114             });
115         try
116         {
117             //构造MimeMessage并设置相关属性值
118             MimeMessage msg = new MimeMessage(session);
119             //设置发件人
120             msg.setFrom(new InternetAddress(from));
121             //设置收件人
122             InternetAddress[] addresses = {new InternetAddress(to)};
123             msg.setRecipients(Message.RecipientType.TO , addresses);
124             //设置邮件主题
125             subject = transferChinese(subject);
126             msg.setSubject(subject);    
127             //构造Multipart
128             Multipart mp = new MimeMultipart();
129             //向Multipart添加正文
130             MimeBodyPart mbpContent = new MimeBodyPart();
131             mbpContent.setText(content);
132             //将BodyPart添加到MultiPart中
133             mp.addBodyPart(mbpContent);
134             //向Multipart添加附件
135             //遍历附件列表，将所有文件添加到邮件消息里
136             for(String efile : attachments)
137             {
138                 MimeBodyPart mbpFile = new MimeBodyPart();
139                 //以文件名创建FileDataSource对象
140                 FileDataSource fds = new FileDataSource(efile);
141                 //处理附件
142                 mbpFile.setDataHandler(new DataHandler(fds));
143                 mbpFile.setFileName(fds.getName());
144                 //将BodyPart添加到MultiPart中
145                 mp.addBodyPart(mbpFile);
146             }
147             //清空附件列表
148             attachments.clear();
149             //向Multipart添加MimeMessage
150             msg.setContent(mp);
151             //设置发送日期
152             msg.setSentDate(new Date());
153             //发送邮件
154             Transport.send(msg);
155         }
156         catch (MessagingException mex)
157         {
158             mex.printStackTrace();
159             return false;
160         }
161         return true;
162     }
163     public static void main(String[] args)
164     {
165         SendEmail sendMail = new SendEmail();
166         sendMail.setSmtpServer("smtp.163.com");
167         //此处设置登录的用户名
168         sendMail.setUsername("你自己合法的163邮箱");
169         //此处设置登录的密码,这个密码非常重要，它不是邮箱账户的登录密码，而是应用密码，需要登录邮箱，在设置中开启此应用
170         //否则很可能出现如下错误：
171         //javax.mail.AuthenticationFailedException: 550 User has no permission
172         sendMail.setPassword("你自己的应用密码");
173         //设置收件人的地址
174         sendMail.setTo("你希望将邮件发给的对方的邮件地址");
175         //设置发送人地址
176         sendMail.setFrom("你自己的合法的163邮箱");
177         //设置标题
178         sendMail.setSubject("测试邮件标题！");
179         //设置内容
180         sendMail.setContent("你好这是一个带多附件的测试邮件！"); 
181         //粘贴附件
182         sendMail.attachfile("/opt/attachment.jpg");
183         if (sendMail.send())
184         {
185             System.out.println("---邮件发送成功---");
186         }
187     }
188 }

复制代码

程序中用到了javax的mail.jar。 maven依赖如下： 

1
2
3
4
5
1     <dependency>
2         <groupId>javax.mail</groupId>
3         <artifactId>mail</artifactId>
4         <version>1.4.4</version>
5     </dependency> 

 

注意，上面的邮件发送逻辑是没有问题的，若发送时，遇到下面的错误：
复制代码

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
 1 javax.mail.AuthenticationFailedException: 550 User has no permission
 2 
 3     at com.sun.mail.smtp.SMTPTransport$Authenticator.authenticate(SMTPTransport.java:809)
 4     at com.sun.mail.smtp.SMTPTransport.authenticate(SMTPTransport.java:752)
 5     at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:669)
 6     at javax.mail.Service.connect(Service.java:317)
 7     at javax.mail.Service.connect(Service.java:176)
 8     at javax.mail.Service.connect(Service.java:125)
 9     at javax.mail.Transport.send0(Transport.java:194)
10     at javax.mail.Transport.send(Transport.java:124)
11     at com.shihuc.demo.SendEmail.send(SendEmail.java:154)
12     at com.shihuc.demo.SendEmail.main(SendEmail.java:181)
13     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
14     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
15     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16     at java.lang.reflect.Method.invoke(Method.java:606)
17     at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)

复制代码

则要考虑是不是没有启用应用密码功能。我的测试过程，是通过启用应用密码功能，得以将500的问题解决掉的！

 

步骤

1. 登录自己的163邮箱，注意，要用你的应用程序中设置的邮箱地址去登录。

2. 在主菜单栏上的“设置”子菜单里面，选择POP3/SMTP/IAMP菜单。

 

3. 若没有开启“客户端授权密码”，则选择将其开启。开启后，会给你生成一个应用授权密码。要用这个生成的密码作为java mail API发送邮件的认证密码，如此，才能解除500密码，若用邮箱的登录密码去设置这个认证密码，会遇到500的错误。下图是开启“客户端授权密码”功能后的截图：

 

这个错误，我折腾了很长时间，百度上找了很久，都找不到，google查看的信息，都是基于gmail的问题(535错误码,其实类似163的这个500的错误)，最后，自己研究了下163邮箱上的功能菜单，摸索着修改，最终解决了这个问题！

 

有需要的，可以参考一下，我在这里，做个memo。

 
 
分类: Java
标签: 技术
好文要顶 关注我 收藏该文
shihuc
关注 - 1
粉丝 - 5
 
 
+加关注
0
0
 
 
 
« 上一篇：@Secured(), @PreAuthorize()
» 下一篇：scala函数定义的四种方式
 
 
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
 
 
 
 
最新IT新闻:
· 老任的Switch发布啦！这些惊喜你不该错过
· 苹果允许开发最大4GB的电视APP 奢华的大屏游戏要来了
· 夏普富士康拟在美国建设液晶面板厂 或投资90亿美元
· 英特尔部分Skylake处理器存在Bug 可通过USB接管计算机
· 乐视发公告：168亿融资落地 融创中国投资约150亿
» 更多新闻...
 
最新知识库文章:
· 「代码家」的学习过程和学习经验分享
· 写给未来的程序媛
· 高质量的工程代码为什么难写
· 循序渐进地代码重构
· 技术的正宗与野路子
» 更多知识库文章...
 


